import telebot
import os
import requests
import json
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime
from telebot import types
from io import BytesIO
import time
import threading

BOT_TOKEN = "7910876699:AAF7CB7l2oPG6TAHYub9QYeRF5EVmw4IDMo"  
COINAPI_KEY = "be4f912e-3174-4a2e-ba64-d840b34bd66f"  

DATABASE_NAME = "crypto_bot.db"

bot = telebot.TeleBot(BOT_TOKEN)

def get_crypto_price(coin_id, currency="usd"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å CoinGecko."""
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies={currency.lower()}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data[coin_id][currency.lower()]
    except requests.exceptions.RequestException as e:
        print(f"API Error: {e}")
        return None
    except (KeyError, ValueError) as e:
        print(f"Error parsing price data: {e}")
        return None
    except (KeyError, ValueError):
        print("Error parsing API response.")
        return None

#–¢—É—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ api 
def get_historical_data(symbol, currency="USD", days="30"):
   
    url = f"https://api.coingecko.com/api/v3/coins/{symbol.lower()}/market_chart?vs_currency={currency.lower()}&days={days}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        # CoinGecko –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤: [[timestamp, price], [timestamp, price], ...]
        historical_prices = [item[1] for item in data['prices']]
        return historical_prices
    except requests.exceptions.HTTPError as e:
        print(f"API Error: HTTP Error {e.response.status_code}: {e}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"API Error: {e}")
        return None
    except (KeyError, ValueError):
        print("Error parsing API response.")
        return None

# –ë–î
def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            preferred_currency TEXT DEFAULT 'USD',
            language TEXT DEFAULT 'ru'
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            alert_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            symbol TEXT,
            target_price REAL,
            above_or_below TEXT,  -- 'above' or 'below'
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    """)

    conn.commit()
    conn.close()

def get_user_preferred_currency(user_id):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT preferred_currency FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return result[0]
    else:
        return "USD" 

def set_user_preferred_currency(user_id, currency):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET preferred_currency = ? WHERE user_id = ?", (currency, user_id))
    conn.commit()
    conn.close()

def add_user(user_id, username):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
    except sqlite3.IntegrityError:
        
        pass
    finally:
        conn.close()

def add_alert(user_id, symbol, target_price, above_or_below):
   
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO alerts (user_id, symbol, target_price, above_or_below) VALUES (?, ?, ?, ?)", (user_id, symbol, target_price, above_or_below))
    conn.commit()
    conn.close()

def get_user_alerts(user_id):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT alert_id, symbol, target_price, above_or_below FROM alerts WHERE user_id = ?", (user_id,))
    alerts = cursor.fetchall()
    conn.close()
    return alerts

def remove_alert(alert_id):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM alerts WHERE alert_id = ?", (alert_id,))
    conn.commit()
    conn.close()


#–¢—É—Ç –±—ã–ª–æ —Å–ª–æ–∂–Ω–æ
def generate_graph(data, symbol):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    plt.figure(figsize=(10, 5))
    plt.plot(data, color='green') 
    plt.title(f"–¶–µ–Ω–∞ {symbol} üìà", fontsize=16) 
    plt.xlabel("–í—Ä–µ–º—è", fontsize=12)
    plt.ylabel("–¶–µ–Ω–∞", fontsize=12)
    plt.grid(True, linestyle='--')  
    plt.xticks(rotation=45)  

    img = BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)  

    plt.close()  
    return img

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    add_user(user_id, message.from_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
    if not get_user_language(user_id):
        markup = types.InlineKeyboardMarkup()
        btn_ru = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='initial_lang_ru')
        btn_en = types.InlineKeyboardButton("English üá¨üáß", callback_data='initial_lang_en')
        markup.add(btn_ru, btn_en)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ö—É—Ä—Å üí∞")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    item2 = types.KeyboardButton("–ì—Ä–∞—Ñ–∏–∫ üìà")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    item3 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üë§")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    item4 = types.KeyboardButton("–û–ø–æ–≤–µ—â–µ–Ω–∏—è üîî")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:", reply_markup=markup, parse_mode="HTML")  # HTML-—Ä–∞–∑–º–µ—Ç–∫–∞

@bot.message_handler(func=lambda message: message.text in ["–ö—É—Ä—Å üí∞", "Price üí∞"])
def get_price_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    crypto_buttons = [
        ("Bitcoin ü™ô", "bitcoin"),
        ("Ethereum üíé", "ethereum"),
        ("TON üí†", "the-open-network"),
        ("USDT üíµ", "tether"),
        ("BNB üåü", "binancecoin"),
        ("–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚ûï", "other")
    ]
    
    for label, coin_id in crypto_buttons:
        markup.add(types.InlineKeyboardButton(label, callback_data=f'price_{coin_id}'))
    
    bot.send_message(message.chat.id, "<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:</b>", 
                     reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith('price_'))
def handle_crypto_price_callback(call):
    crypto_labels = {
        "bitcoin": "Bitcoin",
        "ethereum": "Ethereum",
        "the-open-network": "TON",
        "tether": "USDT",
        "binancecoin": "BNB"
    }
    
    coin_id = call.data.split('_')[1]
    
    if coin_id == "other":
        bot.answer_callback_query(call.id)
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, bitcoin):")
        bot.register_next_step_handler(msg, process_price_step)
        return
        
    currency = get_user_preferred_currency(call.from_user.id).lower()
    price = get_crypto_price(coin_id, currency)
    
    if price:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_crypto_menu")
        markup.add(back_button)
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{crypto_labels[coin_id]}</b> –≤ <b>{currency.upper()}</b>: <code>{price:.2f}</code>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_crypto_menu")
def back_to_crypto_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=2)
    crypto_buttons = [
        ("Bitcoin ü™ô", "bitcoin"),
        ("Ethereum üíé", "ethereum"),
        ("TON üí†", "the-open-network"),
        ("USDT üíµ", "tether"),
        ("BNB üåü", "binancecoin"),
        ("–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚ûï", "other")
    ]
    
    for label, coin_id in crypto_buttons:
        markup.add(types.InlineKeyboardButton(label, callback_data=f'price_{coin_id}'))
    
    bot.edit_message_text(
        "<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:</b>",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    if price:
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{crypto_map[symbol]}</b> –≤ <b>{currency}</b>: <code>{price:.2f}</code>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML"
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚ûï")
def other_crypto_handler(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC):")
    bot.register_next_step_handler(message, process_price_step)

def process_price_step(message):
    try:
        symbol = message.text.lower() #–ò–∑–º–µ–Ω–µ–Ω–æ
        currency = get_user_preferred_currency(message.from_user.id)
        price = get_crypto_price(symbol, currency)
        if price:
            bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{symbol}</b> –≤ <b>{currency}</b>: <code>{price:.2f}</code>", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ API.")
    except Exception as e:
        print(f"Error in process_price_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

@bot.message_handler(func=lambda message: message.text == "–ì—Ä–∞—Ñ–∏–∫ üìà")
def get_graph_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    crypto_buttons = [
        ("Bitcoin ü™ô", "bitcoin"),
        ("Ethereum üíé", "ethereum"),
        ("TON üí†", "the-open-network"),
        ("USDT üíµ", "tether"),
        ("BNB üåü", "binancecoin"),
        ("–î—Ä—É–≥–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚ûï", "custom")
    ]
    
    for label, coin_id in crypto_buttons:
        markup.add(types.InlineKeyboardButton(label, callback_data=f'graph_{coin_id}'))
    
    bot.send_message(message.chat.id, "<b>üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:</b>", 
                     reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == 'graph_custom')
def handle_custom_graph_input(call):
    msg = bot.send_message(call.message.chat.id, 
                          "<b>üìù –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å CoinGecko</b>\n"
                          "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>bitcoin</code>, <code>ethereum</code>, <code>the-open-network</code>",
                          parse_mode="HTML")
    bot.register_next_step_handler(msg, process_custom_graph_input)

def process_custom_graph_input(message):   
    coin_id = message.text.lower().strip()
    currency = get_user_preferred_currency(message.from_user.id).lower()
    try:
        historical_data = get_historical_data(coin_id, currency=currency)
        if historical_data:
            img = generate_graph(historical_data, coin_id.upper())
            bot.send_photo(message.chat.id, img, 
                         caption=f"<b>üìà –ì—Ä–∞—Ñ–∏–∫ {coin_id.upper()}</b> –≤ <b>{currency.upper()}</b>", 
                         parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    except Exception as e:
        print(f"Error in process_custom_graph_input: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

def process_graph_step(message):
    
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        crypto_buttons = [
            ("Bitcoin ü™ô", "bitcoin"),
            ("Ethereum üíé", "ethereum"),
            ("TON üí†", "the-open-network"),
            ("BNB üåü", "binancecoin"),
            ("USDT üíµ", "tether")
        ]
        
        buttons = []
        for label, symbol in crypto_buttons:
            buttons.append(types.InlineKeyboardButton(label, callback_data=f'graph_{symbol}'))
        markup.add(*buttons)
        
        bot.reply_to(message, "<b>üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:</b>", 
                    reply_markup=markup, parse_mode="HTML")
        return
        
    except Exception as e:
        print(f"Error in process_graph_step: {e}")
        bot.reply_to(message, "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.</b>", parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith('graph_'))
def handle_graph_callback(call):
   
    try:
        symbol = call.data.split('_')[1]
        currency = get_user_preferred_currency(call.from_user.id)
        historical_data = get_historical_data(symbol, currency=currency)
        
        if historical_data:
            img = generate_graph(historical_data, symbol.upper())
            bot.send_photo(call.message.chat.id, img, 
                         caption=f"<b>üìà –ì—Ä–∞—Ñ–∏–∫ {symbol.upper()}</b> –≤ <b>{currency}</b>", 
                         parse_mode="HTML")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print(f"Error in handle_graph_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
        currency = get_user_preferred_currency(message.from_user.id)
        historical_data = get_historical_data(symbol, currency=currency)
        if historical_data:
            img = generate_graph(historical_data, symbol)
            bot.send_photo(message.chat.id, img, caption=f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã <b>{symbol}</b> –≤ <b>{currency}</b>", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "–ù–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
    except Exception as e:
        print(f"Error in process_graph_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")

def get_user_language(user_id):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else "ru"

def set_user_language(user_id, language):
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (language, user_id))
    conn.commit()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å üë§")
def show_profile_handler(message):
    
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    preferred_currency = get_user_preferred_currency(user_id)
    language = get_user_language(user_id)
    
    
    profile_text = (
        "‚ùØ <b>üì± –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å</b> ‚ùÆ\n\n"
        f"‚ùØ <b>üÜî ID:</b>\n<blockquote>{user_id}</blockquote>\n"
        f"‚ùØ <b>üë§ –ò–º—è:</b>\n<blockquote>{username}</blockquote>\n"
        f"‚ùØ <b>üí∞ –í–∞–ª—é—Ç–∞:</b>\n<blockquote>{preferred_currency}</blockquote>\n"
        f"‚ùØ <b>üåê –Ø–∑—ã–∫:</b>\n<blockquote>{'–†—É—Å—Å–∫–∏–π' if language == 'ru' else 'English'}</blockquote>"
    )

    
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_currency = types.InlineKeyboardButton("üí∞ –í–∞–ª—é—Ç–∞", callback_data='show_currency')
    btn_language = types.InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data='show_language')
    markup.add(btn_currency, btn_language)

    bot.send_message(message.chat.id, profile_text, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'show_currency')
def show_currency_options(call):
    
    current_currency = get_user_preferred_currency(call.from_user.id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    currencies = [
        ("USD üá∫üá∏", "USD"),
        ("EUR üá™üá∫", "EUR"),
        ("RUB üá∑üá∫", "RUB"),
        ("USDT üíµ", "USDT")
    ]
    
    buttons = []
    for label, currency in currencies:
        check_mark = "‚úÖ " if currency == current_currency else ""
        buttons.append(types.InlineKeyboardButton(f"{check_mark}{label}", callback_data=f'currency_{currency}'))
    
    markup.add(*buttons)
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back_to_profile')
    markup.add(btn_back)
    
    bot.edit_message_text("<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>", call.message.chat.id, call.message.message_id, 
                         reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == 'show_language')
def show_language_options(call):
    
    current_language = get_user_language(call.from_user.id)
    markup = types.InlineKeyboardMarkup()
    
    languages = [
        ("–†—É—Å—Å–∫–∏–π üá∑üá∫", "ru"),
        ("English üá¨üáß", "en")
    ]
    
    for label, lang in languages:
        check_mark = "‚úÖ " if lang == current_language else ""
        btn = types.InlineKeyboardButton(f"{check_mark}{label}", callback_data=f'lang_{lang}')
        markup.add(btn)
    
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back_to_profile')
    markup.add(btn_back)
    
    bot.edit_message_text("Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_') or call.data.startswith('initial_lang_'))
def change_language_callback(call):
   
    language = call.data.split('_')[1]
    user_id = call.from_user.id
    
    set_user_language(user_id, language)
    
    if language == 'ru':
        success_msg = "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
        welcome_msg = "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>"
        buttons = ["–ö—É—Ä—Å üí∞", "–ì—Ä–∞—Ñ–∏–∫ üìà", "–ü—Ä–æ—Ñ–∏–ª—å üë§", "–û–ø–æ–≤–µ—â–µ–Ω–∏—è üîî"]
    else:
        success_msg = "‚úÖ Language changed to English"
        welcome_msg = "<b>üëã Welcome!</b>"
        buttons = ["Price üí∞", "Chart üìà", "Profile üë§", "Alerts üîî"]
    
    bot.answer_callback_query(call.id, success_msg)
    
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in buttons:
        markup.add(types.KeyboardButton(btn))
    
    if call.data.startswith('initial_lang_'):
        bot.send_message(call.message.chat.id, welcome_msg, reply_markup=markup, parse_mode="HTML")
    else:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, welcome_msg, reply_markup=markup, parse_mode="HTML")
    
    if call.data.startswith('initial_lang_'):
        bot.send_message(call.message.chat.id, welcome_msg, reply_markup=markup, parse_mode="HTML")
    else:
        
        bot.edit_message_text(success_msg, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, welcome_msg, reply_markup=markup, parse_mode="HTML")
        show_profile_handler(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_profile')
def back_to_profile_callback(call):
    
    show_profile_handler(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def change_currency_callback(call):
    
    currency = call.data.split('_')[1]
    set_user_preferred_currency(call.from_user.id, currency)
    bot.answer_callback_query(call.id, f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}")
    show_currency_options(call)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã

@bot.message_handler(func=lambda message: message.text == "–û–ø–æ–≤–µ—â–µ–Ω–∏—è üîî")
def alerts_handler(message):
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ ‚ûï")  
    item2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π üìú") 
    item3 = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô") 
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "–û–ø–æ–≤–µ—â–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ ‚ûï")
def create_alert_handler(message):
   
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, bitcoin):") #–ò–∑–º–µ–Ω–µ–Ω–æ
    bot.register_next_step_handler(message, process_alert_symbol_step)

def process_alert_symbol_step(message):
    
    try:
        symbol = message.text.lower() #–ò–∑–º–µ–Ω–µ–Ω–æ
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É:")
        bot.register_next_step_handler(message, process_alert_price_step, symbol)
    except Exception as e:
        print(f"Error in process_alert_symbol_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def process_alert_price_step(message, symbol):
    
    try:
        target_price = float(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("–í—ã—à–µ ‚¨ÜÔ∏è")
        item2 = types.KeyboardButton("–ù–∏–∂–µ ‚¨áÔ∏è")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?", reply_markup=markup)
        bot.register_next_step_handler(message, process_alert_above_below_step, symbol, target_price)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"Error in process_alert_price_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

def process_alert_above_below_step(message, symbol, target_price):
    
    try:
        above_or_below = message.text.split()[0].lower()
        if above_or_below in ("–≤—ã—à–µ", "–Ω–∏–∂–µ"):
            add_alert(message.from_user.id, symbol, target_price, above_or_below)
            bot.send_message(message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: <b>{symbol}</b> –ø—Ä–∏ <b>{above_or_below}</b> <code>{target_price}</code>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ '–í—ã—à–µ' –∏–ª–∏ '–ù–∏–∂–µ'.", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        print(f"Error in process_alert_above_below_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π üìú")
def list_alerts_handler(message):
    
    alerts = get_user_alerts(message.from_user.id)
    if alerts:
        message_text = "<b>üîî –í–∞—à–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n\n"
        for alert_id, symbol, target_price, above_or_below in alerts:
            message_text += f"<b>üíé {symbol}</b>\n" \
                          f"<b>üìä –£—Å–ª–æ–≤–∏–µ:</b> <code>{above_or_below}</code>\n" \
                          f"<b>üíµ –¶–µ–Ω–∞:</b> <code>{target_price}</code>\n" \
                          f"<b>üîë ID:</b> <code>{alert_id}</code>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        markup = types.InlineKeyboardMarkup()
        for alert_id, _, _, _ in alerts:
            btn = types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {alert_id} üóëÔ∏è", callback_data=f"delete_alert_{alert_id}")
            markup.add(btn)

        bot.send_message(message.chat.id, message_text, reply_markup=markup, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_alert_'))
def delete_alert_callback(call):
    
    alert_id = int(call.data.split('_')[2])
    remove_alert(alert_id)
    bot.answer_callback_query(call.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ {alert_id} —É–¥–∞–ª–µ–Ω–æ")
    bot.send_message(call.message.chat.id, f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ <code>{alert_id}</code> —É–¥–∞–ª–µ–Ω–æ", parse_mode="HTML")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    list_alerts_handler(call.message)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ üîô")
def back_to_menu(message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    send_welcome(message)

def check_alerts():
    
    while True:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT alert_id, user_id, symbol, target_price, above_or_below FROM alerts")
        alerts = cursor.fetchall()
        conn.close()

        for alert_id, user_id, symbol, target_price, above_or_below in alerts:
            try:
                current_price = get_crypto_price(symbol)
                if current_price:
                    if above_or_below == "–≤—ã—à–µ" and current_price >= target_price:
                        bot.send_message(user_id, f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ <b>{symbol}</b> –¥–æ—Å—Ç–∏–≥–ª–∞ <code>{current_price:.2f}</code>, –≤—ã—à–µ <code>{target_price}</code>! üöÄ", parse_mode="HTML")
                        remove_alert(alert_id)  
                    elif above_or_below == "–Ω–∏–∂–µ" and current_price <= target_price:
                        bot.send_message(user_id, f"üîî –í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ <b>{symbol}</b> –¥–æ—Å—Ç–∏–≥–ª–∞ <code>{current_price:.2f}</code>, –Ω–∏–∂–µ <code>{target_price}</code>! üìâ", parse_mode="HTML")
                        remove_alert(alert_id)  
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {e}")
        time.sleep(60) 


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    create_database()

    import threading
    alert_thread = threading.Thread(target=check_alerts)
    alert_thread.daemon = True 
    alert_thread.start()

    bot.infinity_polling()

